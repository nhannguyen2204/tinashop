@using TinaShopV2.Common;
@using TinaShopV2.Common.Extensions;
@using TinaShopV2.Areas.Administration.Models.CustomControls;

@model TinaShopV2.Areas.Administration.Models.Media.MediaIndexViewModel

@{
    ViewBag.Title = string.Format(GlobalObjects.TitleFormat, Resources.Commons.Index, "Media");
    Layout = "~/Areas/Administration/Views/Shared/_Layout.cshtml";
}
@Html.SmartValidationSummary()
<h2>@ViewBag.Title</h2>

<p>@Html.ActionLink(Resources.Commons.Create, "Create", ViewContext.LocalizeRouteValues())</p>

<div class="row">
    <!-- NEW WIDGET START -->
    <article class="col-sm-12">

        <div class="jarviswidget jarviswidget-color-blueDark">
            <header>
                <span class="widget-icon"> <i class="fa fa-search"></i> </span>
                <h2>@Resources.Commons.Search</h2>
            </header>

            <!-- widget div-->
            <div>

                <!-- widget edit box -->
                <div class="jarviswidget-editbox">
                    <!-- This area used as dropdown edit box -->

                </div>
                <!-- end widget edit box -->
                <!-- widget content -->
                <div class="widget-body">
                    @using (Html.BeginForm("Index", "Medias", FormMethod.Post, null))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <div class="row">
                                @Html.LabelFor(model => model.TypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-8">
                                    @Html.SmartDropDownListFor(m => m.TypeId, ViewBag.MediaTypes as IEnumerable<SelectListItem>, null, true)
                                    @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group" id="FindProductBox">
                            <div class="row">
                                @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-8">
                                    @Html.HiddenFor(m => m.ProductCode)
                                    <div id="ProductSelected" class="col-md-12">
                                        @if (!string.IsNullOrEmpty(Model.ProductCode))
                                        {
                                            <div class="alert adjusted alert-success fade in"><button class="close" onclick="removeProduct('@Model.ProductCode');" data-dismiss="alert">×</button><strong>@Model.ProductObj.ProductName (@Model.ProductCode)</strong></div>
                                        }
                                    </div>
                                    @Html.TextBox("ProductCode_Find", "", new { @class = "form-control", @autofocus = "false" })
                                    @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-actions no-color">
                            <button type="submit" value="@Resources.Commons.Search" title="@Resources.Commons.Search" class="btn btn-default">
                                <i class="fa fa-search"></i>
                                @Resources.Commons.Search
                            </button>
                        </div>
                    }
                </div>
                <!-- end widget body-->

            </div>
            <!-- end widget content -->

        </div>
        <!-- end widget -->

    </article>
    <!-- WIDGET END -->
</div>

<div class="table-responsive">
    <table class="table table-hover table-bordered table-striped responsive-utilities">
        <tr>
            <th>@Resources.Commons.Image</th>
            <th>@Resources.Commons.Name</th>
            <th>@Resources.Commons.UpdatedUser</th>
            <th>@Resources.Commons.UpdatedDatetime</th>
            <th></th>
        </tr>
        @foreach (var item in Model.Medias)
        {
        <tr>
            <td><img alt="@item.Name" src="@Path.Combine(GlobalObjects.MediaImageFolderPath, item.ThumbPath)" style="max-width:100px;" class="thumbnail" /></td>
            <td>@Html.DisplayFor(modelItem => item.Name)</td>
            <td>@Html.DisplayFor(modelItem => item.UpdatedUser.UserName)</td>
            <td>@Html.DisplayFor(modelItem => item.UpdatedDatetime)</td>
            <td>
                @Html.ActionLink(Resources.Commons.Edit, "Edit", ViewContext.LocalizeRouteValues(new { id = item.Id })) |
                @Html.ActionLink(Resources.Commons.Detail, "Details", ViewContext.LocalizeRouteValues(new { id = item.Id })) |
                @Html.ActionLink(Resources.Commons.Delete, "Delete", ViewContext.LocalizeRouteValues(new { id = item.Id }))
            </td>
        </tr>
        }
    </table>
    @Html.Pager(ViewBag.Pager as PagerViewModel)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/CustomValidation")
    <script>
        $(function () {
            $("#ProductCode_Find").autocomplete({
                delay: 300,
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("@Url.Action("Find", "Products", new { area = "Administration", @productCode = "" })" + "/" + $("#ProductCode_Find").val(), function (data) {
                        // data is an array of objects and must be transformed for autocomplete to use
                        var array = data.error ? [] : $.map(data, function (m) {
                            return {
                                label: m.ProductName + " (" + m.ProductCode + ")",
                                value: m.ProductCode,
                            };
                        });
                        response(array);
                    });
                },
                focus: function (event, ui) {
                    // prevent autocomplete from updating the textbox
                    event.preventDefault();
                },
                select: function (event, ui) {
                    // prevent autocomplete from updating the textbox
                    event.preventDefault();
                    // navigate to the selected item's url
                    $("#ProductCode").val(ui.item.value);
                    $("#ProductCode_Find").val('');
                    $("#ProductCode_Find").fadeOut();
                    $("#ProductSelected").html("<div class=\"alert adjusted alert-success fade in\"><button class=\"close\" onclick=\"removeProduct('" + ui.item.value + "');\" data-dismiss=\"alert\">×</button><strong>" + ui.item.label + "</strong></div>");
                }
            });
        });

        function removeProduct(productCode) {
            $("#ProductCode").val('');
            $("#ProductCode_Find").fadeIn();
        };

        @if (!string.IsNullOrEmpty(Model.ProductCode))
        {
            <text>$("#ProductCode_Find").fadeOut();</text>
        }

        function TypeId_Changed() {
            if ($("#TypeId").val() == '@GlobalObjects.MediaType_ProductImage_Id') {
                $("#FindProductBox").show();
            }
            else {
                $("#FindProductBox").hide();
            }
        }
        $("#TypeId").on("change", TypeId_Changed);
        TypeId_Changed();

    </script>
}