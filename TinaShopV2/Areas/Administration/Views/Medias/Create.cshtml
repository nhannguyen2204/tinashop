@using TinaShopV2.Common;
@using TinaShopV2.Common.Extensions;

@model TinaShopV2.Areas.Administration.Models.Media.MediaViewModel

@{
    ViewBag.Title = string.Format(GlobalObjects.TitleFormat, Resources.Commons.Create, "Media");
    Layout = "~/Areas/Administration/Views/Shared/_Layout.cshtml";
}
@Html.SmartValidationSummary()
<h2>@Resources.Commons.Create</h2>
@using (Html.BeginForm("Create", "Medias", null, FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Media</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ThumbUploader, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.HiddenFor(m => m.ThumbPath)
                @Html.TextBoxFor(m => m.ThumbUploader, new { @type = "file", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ThumbUploader, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileUploader, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.HiddenFor(m => m.FilePath)
                @Html.TextBoxFor(m => m.FileUploader, new { @type = "file", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.FileUploader, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.SmartDropDownListFor(m => m.TypeId, ViewBag.MediaTypes as IEnumerable<SelectListItem>, null, true)
                @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="FindProductBox">
            @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.HiddenFor(m => m.ProductCode)
                <div id="ProductSelected" class="col-md-12">
                </div>
                @Html.TextBox("ProductCode_Find", "", new { @class = "form-control", @autofocus = "false" })
                @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>
    <div class="form-actions no-color">
        <input type="submit" value="@Resources.Commons.Save" class="btn btn-default" /> |
        @Html.ActionLink(Resources.Commons.BackToList, "Index", ViewContext.LocalizeRouteValues())
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/CustomValidation")

    <script type="text/javascript">
        $(function () {
            $("#ProductCode_Find").autocomplete({
                delay: 500,
                minLength: 3,
                source: function (request, response) {
                    $.getJSON("@Url.Action("Find", "Products", new { area = "Administration" })" + "/" + $("#ProductCode_Find").val(), function (data) {
                        // data is an array of objects and must be transformed for autocomplete to use
                        var array = data.error ? [] : $.map(data, function (m) {
                            return {
                                label: m.ProductName + " (" + m.ProductCode + ")",
                                value: m.ProductCode,
                            };
                        });
                        response(array);
                    });
                },
                focus: function (event, ui) {
                    // prevent autocomplete from updating the textbox
                    event.preventDefault();
                },
                select: function (event, ui) {
                    // prevent autocomplete from updating the textbox
                    event.preventDefault();
                    // navigate to the selected item's url
                    $("#ProductCode").val(ui.item.value);
                    $("#ProductCode_Find").val('');
                    $("#ProductCode_Find").fadeOut();
                    $("#ProductSelected").html("<div class=\"alert adjusted alert-success fade in\"><button class=\"close\" onclick=\"removeProduct('" + ui.item.value + "');\" data-dismiss=\"alert\">×</button><strong>" + ui.item.label + "</strong></div>");
                }
            });
        });

        function removeProduct(productCode) {
            $("#ProductCode").val('');
            $("#ProductSelected").html('');
            $("#ProductCode_Find").fadeIn();
        };

        function TypeId_Changed() {
            if ($("#TypeId").val() == '@GlobalObjects.MediaType_ProductImage_Id') {
                $("#FindProductBox").show();
            }
            else {
                $("#FindProductBox").hide();
            }
        }
        $("#TypeId").on("change", TypeId_Changed);
        TypeId_Changed();

    </script>
}
